#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HUWATIExpress.Models
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;
    using System.Runtime.Serialization;

    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HUWA")]
	public partial class huwadbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    partial void InsertBill_Item(Bill_Item instance);
    partial void UpdateBill_Item(Bill_Item instance);
    partial void DeleteBill_Item(Bill_Item instance);
    partial void InsertBus(Bus instance);
    partial void UpdateBus(Bus instance);
    partial void DeleteBus(Bus instance);
    partial void InsertBus_Type(Bus_Type instance);
    partial void UpdateBus_Type(Bus_Type instance);
    partial void DeleteBus_Type(Bus_Type instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertDriver(Driver instance);
    partial void UpdateDriver(Driver instance);
    partial void DeleteDriver(Driver instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertSalary(Salary instance);
    partial void UpdateSalary(Salary instance);
    partial void DeleteSalary(Salary instance);
    partial void InsertSeat(Seat instance);
    partial void UpdateSeat(Seat instance);
    partial void DeleteSeat(Seat instance);
    partial void InsertSeat_Map(Seat_Map instance);
    partial void UpdateSeat_Map(Seat_Map instance);
    partial void DeleteSeat_Map(Seat_Map instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertTrip(Trip instance);
    partial void UpdateTrip(Trip instance);
    partial void DeleteTrip(Trip instance);
    #endregion
		
		public huwadbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HUWAConnectionString2"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public huwadbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public huwadbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public huwadbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public huwadbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		public System.Data.Linq.Table<Bill_Item> Bill_Items
		{
			get
			{
				return this.GetTable<Bill_Item>();
			}
		}
		
		public System.Data.Linq.Table<Bus> Bus
		{
			get
			{
				return this.GetTable<Bus>();
			}
		}
		
		public System.Data.Linq.Table<Bus_Type> Bus_Types
		{
			get
			{
				return this.GetTable<Bus_Type>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Driver> Drivers
		{
			get
			{
				return this.GetTable<Driver>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Route> Routes
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<Salary> Salaries
		{
			get
			{
				return this.GetTable<Salary>();
			}
		}
		
		public System.Data.Linq.Table<Seat> Seats
		{
			get
			{
				return this.GetTable<Seat>();
			}
		}
		
		public System.Data.Linq.Table<Seat_Map> Seat_Maps
		{
			get
			{
				return this.GetTable<Seat_Map>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<Trip> Trips
		{
			get
			{
				return this.GetTable<Trip>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
    [DataContract (IsReference = true)]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		[DataMember]
		private int _Account_Id;
        [DataMember]
        private string _User_Name;
        [DataMember]
        private string _Password;
        [DataMember]
        private int _Role_Id;
		
		private EntitySet<Admin> _Admins;
		
		private EntitySet<Customer> _Customers;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccount_IdChanging(int value);
    partial void OnAccount_IdChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRole_IdChanging(int value);
    partial void OnRole_IdChanged();
    #endregion
		
		public Account()
		{
			this._Admins = new EntitySet<Admin>(new Action<Admin>(this.attach_Admins), new Action<Admin>(this.detach_Admins));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Account_Id
		{
			get
			{
				return this._Account_Id;
			}
			set
			{
				if ((this._Account_Id != value))
				{
					this.OnAccount_IdChanging(value);
					this.SendPropertyChanging();
					this._Account_Id = value;
					this.SendPropertyChanged("Account_Id");
					this.OnAccount_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Id", DbType="Int NOT NULL")]
		public int Role_Id
		{
			get
			{
				return this._Role_Id;
			}
			set
			{
				if ((this._Role_Id != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IdChanging(value);
					this.SendPropertyChanging();
					this._Role_Id = value;
					this.SendPropertyChanged("Role_Id");
					this.OnRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Admin", Storage="_Admins", ThisKey="Account_Id", OtherKey="Account_Id")]
		public EntitySet<Admin> Admins
		{
			get
			{
				return this._Admins;
			}
			set
			{
				this._Admins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Customer", Storage="_Customers", ThisKey="Account_Id", OtherKey="Account_Id")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Account", Storage="_Role", ThisKey="Role_Id", OtherKey="Role_Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._Role_Id = value.Role_Id;
					}
					else
					{
						this._Role_Id = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
    [DataContract(IsReference = true)]
    public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Admin_Id;
        [DataMember]
        private string _Admin_Name;
        [DataMember]
        private System.Nullable<decimal> _Phone;
        [DataMember]
        private string _Address;
        [DataMember]
        private bool _Sex;
        [DataMember]
        private int _Account_Id;
        [DataMember]
        private int _Salary_Id;
        [DataMember]
        private string _Url_Image;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Salary> _Salary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdmin_IdChanging(int value);
    partial void OnAdmin_IdChanged();
    partial void OnAdmin_NameChanging(string value);
    partial void OnAdmin_NameChanged();
    partial void OnPhoneChanging(System.Nullable<decimal> value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    partial void OnAccount_IdChanging(int value);
    partial void OnAccount_IdChanged();
    partial void OnSalary_IdChanging(int value);
    partial void OnSalary_IdChanged();
    partial void OnUrl_ImageChanging(string value);
    partial void OnUrl_ImageChanged();
    #endregion
		
		public Admin()
		{
			this._Account = default(EntityRef<Account>);
			this._Salary = default(EntityRef<Salary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Admin_Id
		{
			get
			{
				return this._Admin_Id;
			}
			set
			{
				if ((this._Admin_Id != value))
				{
					this.OnAdmin_IdChanging(value);
					this.SendPropertyChanging();
					this._Admin_Id = value;
					this.SendPropertyChanged("Admin_Id");
					this.OnAdmin_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Admin_Name
		{
			get
			{
				return this._Admin_Name;
			}
			set
			{
				if ((this._Admin_Name != value))
				{
					this.OnAdmin_NameChanging(value);
					this.SendPropertyChanging();
					this._Admin_Name = value;
					this.SendPropertyChanged("Admin_Name");
					this.OnAdmin_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Decimal(11,0)")]
		public System.Nullable<decimal> Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Id", DbType="Int NOT NULL")]
		public int Account_Id
		{
			get
			{
				return this._Account_Id;
			}
			set
			{
				if ((this._Account_Id != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_IdChanging(value);
					this.SendPropertyChanging();
					this._Account_Id = value;
					this.SendPropertyChanged("Account_Id");
					this.OnAccount_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary_Id", DbType="Int NOT NULL")]
		public int Salary_Id
		{
			get
			{
				return this._Salary_Id;
			}
			set
			{
				if ((this._Salary_Id != value))
				{
					if (this._Salary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalary_IdChanging(value);
					this.SendPropertyChanging();
					this._Salary_Id = value;
					this.SendPropertyChanged("Salary_Id");
					this.OnSalary_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url_Image", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Url_Image
		{
			get
			{
				return this._Url_Image;
			}
			set
			{
				if ((this._Url_Image != value))
				{
					this.OnUrl_ImageChanging(value);
					this.SendPropertyChanging();
					this._Url_Image = value;
					this.SendPropertyChanged("Url_Image");
					this.OnUrl_ImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Admin", Storage="_Account", ThisKey="Account_Id", OtherKey="Account_Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Admins.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Admins.Add(this);
						this._Account_Id = value.Account_Id;
					}
					else
					{
						this._Account_Id = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salary_Admin", Storage="_Salary", ThisKey="Salary_Id", OtherKey="Salary_Id", IsForeignKey=true)]
		public Salary Salary
		{
			get
			{
				return this._Salary.Entity;
			}
			set
			{
				Salary previousValue = this._Salary.Entity;
				if (((previousValue != value) 
							|| (this._Salary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Salary.Entity = null;
						previousValue.Admins.Remove(this);
					}
					this._Salary.Entity = value;
					if ((value != null))
					{
						value.Admins.Add(this);
						this._Salary_Id = value.Salary_Id;
					}
					else
					{
						this._Salary_Id = default(int);
					}
					this.SendPropertyChanged("Salary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bill")]
    [DataContract(IsReference = true)]
    public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Bill_Id;
        [DataMember]
        private System.DateTime _Create_Date;
        [DataMember]
        private decimal _Total_Price;
        [DataMember]
        private bool _Status;
        [DataMember]
        private int _Customer_Id;
		
		private EntitySet<Bill_Item> _Bill_Items;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBill_IdChanging(int value);
    partial void OnBill_IdChanged();
    partial void OnCreate_DateChanging(System.DateTime value);
    partial void OnCreate_DateChanged();
    partial void OnTotal_PriceChanging(decimal value);
    partial void OnTotal_PriceChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    partial void OnCustomer_IdChanging(int value);
    partial void OnCustomer_IdChanged();
    #endregion
		
		public Bill()
		{
			this._Bill_Items = new EntitySet<Bill_Item>(new Action<Bill_Item>(this.attach_Bill_Items), new Action<Bill_Item>(this.detach_Bill_Items));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bill_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Bill_Id
		{
			get
			{
				return this._Bill_Id;
			}
			set
			{
				if ((this._Bill_Id != value))
				{
					this.OnBill_IdChanging(value);
					this.SendPropertyChanging();
					this._Bill_Id = value;
					this.SendPropertyChanged("Bill_Id");
					this.OnBill_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Create_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Price", DbType="Decimal(10,6) NOT NULL")]
		public decimal Total_Price
		{
			get
			{
				return this._Total_Price;
			}
			set
			{
				if ((this._Total_Price != value))
				{
					this.OnTotal_PriceChanging(value);
					this.SendPropertyChanging();
					this._Total_Price = value;
					this.SendPropertyChanged("Total_Price");
					this.OnTotal_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Id", DbType="Int NOT NULL")]
		public int Customer_Id
		{
			get
			{
				return this._Customer_Id;
			}
			set
			{
				if ((this._Customer_Id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IdChanging(value);
					this.SendPropertyChanging();
					this._Customer_Id = value;
					this.SendPropertyChanged("Customer_Id");
					this.OnCustomer_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_Bill_Item", Storage="_Bill_Items", ThisKey="Bill_Id", OtherKey="Bill_Id")]
		public EntitySet<Bill_Item> Bill_Items
		{
			get
			{
				return this._Bill_Items;
			}
			set
			{
				this._Bill_Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Bill", Storage="_Customer", ThisKey="Customer_Id", OtherKey="Customer_Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._Customer_Id = value.Customer_Id;
					}
					else
					{
						this._Customer_Id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bill_Items(Bill_Item entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_Bill_Items(Bill_Item entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bill_Item")]
    [DataContract(IsReference = true)]
    public partial class Bill_Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Bill_Id;
        [DataMember]
        private int _Line_Id;
        [DataMember]
        private int _Ticket_Id;
		
		private EntityRef<Bill> _Bill;
		
		private EntityRef<Ticket> _Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBill_IdChanging(int value);
    partial void OnBill_IdChanged();
    partial void OnLine_IdChanging(int value);
    partial void OnLine_IdChanged();
    partial void OnTicket_IdChanging(int value);
    partial void OnTicket_IdChanged();
    #endregion
		
		public Bill_Item()
		{
			this._Bill = default(EntityRef<Bill>);
			this._Ticket = default(EntityRef<Ticket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bill_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Bill_Id
		{
			get
			{
				return this._Bill_Id;
			}
			set
			{
				if ((this._Bill_Id != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBill_IdChanging(value);
					this.SendPropertyChanging();
					this._Bill_Id = value;
					this.SendPropertyChanged("Bill_Id");
					this.OnBill_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Line_Id
		{
			get
			{
				return this._Line_Id;
			}
			set
			{
				if ((this._Line_Id != value))
				{
					this.OnLine_IdChanging(value);
					this.SendPropertyChanging();
					this._Line_Id = value;
					this.SendPropertyChanged("Line_Id");
					this.OnLine_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticket_Id", DbType="Int NOT NULL")]
		public int Ticket_Id
		{
			get
			{
				return this._Ticket_Id;
			}
			set
			{
				if ((this._Ticket_Id != value))
				{
					if (this._Ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicket_IdChanging(value);
					this.SendPropertyChanging();
					this._Ticket_Id = value;
					this.SendPropertyChanged("Ticket_Id");
					this.OnTicket_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_Bill_Item", Storage="_Bill", ThisKey="Bill_Id", OtherKey="Bill_Id", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.Bill_Items.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.Bill_Items.Add(this);
						this._Bill_Id = value.Bill_Id;
					}
					else
					{
						this._Bill_Id = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_Bill_Item", Storage="_Ticket", ThisKey="Ticket_Id", OtherKey="Ticket_Id", IsForeignKey=true)]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.Bill_Items.Remove(this);
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.Bill_Items.Add(this);
						this._Ticket_Id = value.Ticket_Id;
					}
					else
					{
						this._Ticket_Id = default(int);
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bus")]
    [DataContract(IsReference = true)]
    public partial class Bus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Bus_Id;
        [DataMember]
        private int _Company_Id;
        [DataMember]
        private int _Bus_Type_Id;
        [DataMember]
        private string _License_Plates;
        [DataMember]
        private bool _Status;
		
		private EntitySet<Seat> _Seats;
		
		private EntitySet<Trip> _Trips;
		
		private EntityRef<Bus_Type> _Bus_Type;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBus_IdChanging(int value);
    partial void OnBus_IdChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    partial void OnBus_Type_IdChanging(int value);
    partial void OnBus_Type_IdChanged();
    partial void OnLicense_PlatesChanging(string value);
    partial void OnLicense_PlatesChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    #endregion
		
		public Bus()
		{
			this._Seats = new EntitySet<Seat>(new Action<Seat>(this.attach_Seats), new Action<Seat>(this.detach_Seats));
			this._Trips = new EntitySet<Trip>(new Action<Trip>(this.attach_Trips), new Action<Trip>(this.detach_Trips));
			this._Bus_Type = default(EntityRef<Bus_Type>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bus_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Bus_Id
		{
			get
			{
				return this._Bus_Id;
			}
			set
			{
				if ((this._Bus_Id != value))
				{
					this.OnBus_IdChanging(value);
					this.SendPropertyChanging();
					this._Bus_Id = value;
					this.SendPropertyChanged("Bus_Id");
					this.OnBus_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bus_Type_Id", DbType="Int NOT NULL")]
		public int Bus_Type_Id
		{
			get
			{
				return this._Bus_Type_Id;
			}
			set
			{
				if ((this._Bus_Type_Id != value))
				{
					if (this._Bus_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBus_Type_IdChanging(value);
					this.SendPropertyChanging();
					this._Bus_Type_Id = value;
					this.SendPropertyChanged("Bus_Type_Id");
					this.OnBus_Type_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_License_Plates", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string License_Plates
		{
			get
			{
				return this._License_Plates;
			}
			set
			{
				if ((this._License_Plates != value))
				{
					this.OnLicense_PlatesChanging(value);
					this.SendPropertyChanging();
					this._License_Plates = value;
					this.SendPropertyChanged("License_Plates");
					this.OnLicense_PlatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bus_Seat", Storage="_Seats", ThisKey="Bus_Id", OtherKey="Bus_Id")]
		public EntitySet<Seat> Seats
		{
			get
			{
				return this._Seats;
			}
			set
			{
				this._Seats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bus_Trip", Storage="_Trips", ThisKey="Bus_Id", OtherKey="Bus_Id")]
		public EntitySet<Trip> Trips
		{
			get
			{
				return this._Trips;
			}
			set
			{
				this._Trips.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bus_Type_Bus", Storage="_Bus_Type", ThisKey="Bus_Type_Id", OtherKey="Bus_Type_Id", IsForeignKey=true)]
		public Bus_Type Bus_Type
		{
			get
			{
				return this._Bus_Type.Entity;
			}
			set
			{
				Bus_Type previousValue = this._Bus_Type.Entity;
				if (((previousValue != value) 
							|| (this._Bus_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bus_Type.Entity = null;
						previousValue.Bus.Remove(this);
					}
					this._Bus_Type.Entity = value;
					if ((value != null))
					{
						value.Bus.Add(this);
						this._Bus_Type_Id = value.Bus_Type_Id;
					}
					else
					{
						this._Bus_Type_Id = default(int);
					}
					this.SendPropertyChanged("Bus_Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Bus", Storage="_Company", ThisKey="Company_Id", OtherKey="Company_Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Bus.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Bus.Add(this);
						this._Company_Id = value.Company_Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Bus = this;
		}
		
		private void detach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Bus = null;
		}
		
		private void attach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Bus = this;
		}
		
		private void detach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Bus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bus_Type")]
    [DataContract(IsReference = true)]
    public partial class Bus_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Bus_Type_Id;
        [DataMember]
        private string _Bus_Type_Name;
		[DataMember]
		private int _Total_Seat;
        [DataMember]
        private bool _Is_Seat;
		
		private EntitySet<Bus> _Bus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBus_Type_IdChanging(int value);
    partial void OnBus_Type_IdChanged();
    partial void OnBus_Type_NameChanging(string value);
    partial void OnBus_Type_NameChanged();
    partial void OnTotal_SeatChanging(int value);
    partial void OnTotal_SeatChanged();
    partial void OnIs_SeatChanging(bool value);
    partial void OnIs_SeatChanged();
    #endregion
		
		public Bus_Type()
		{
			this._Bus = new EntitySet<Bus>(new Action<Bus>(this.attach_Bus), new Action<Bus>(this.detach_Bus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bus_Type_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Bus_Type_Id
		{
			get
			{
				return this._Bus_Type_Id;
			}
			set
			{
				if ((this._Bus_Type_Id != value))
				{
					this.OnBus_Type_IdChanging(value);
					this.SendPropertyChanging();
					this._Bus_Type_Id = value;
					this.SendPropertyChanged("Bus_Type_Id");
					this.OnBus_Type_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bus_Type_Name", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Bus_Type_Name
		{
			get
			{
				return this._Bus_Type_Name;
			}
			set
			{
				if ((this._Bus_Type_Name != value))
				{
					this.OnBus_Type_NameChanging(value);
					this.SendPropertyChanging();
					this._Bus_Type_Name = value;
					this.SendPropertyChanged("Bus_Type_Name");
					this.OnBus_Type_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Seat", DbType="Int NOT NULL")]
		public int Total_Seat
		{
			get
			{
				return this._Total_Seat;
			}
			set
			{
				if ((this._Total_Seat != value))
				{
					this.OnTotal_SeatChanging(value);
					this.SendPropertyChanging();
					this._Total_Seat = value;
					this.SendPropertyChanged("Total_Seat");
					this.OnTotal_SeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Seat", DbType="Bit NOT NULL")]
		public bool Is_Seat
		{
			get
			{
				return this._Is_Seat;
			}
			set
			{
				if ((this._Is_Seat != value))
				{
					this.OnIs_SeatChanging(value);
					this.SendPropertyChanging();
					this._Is_Seat = value;
					this.SendPropertyChanged("Is_Seat");
					this.OnIs_SeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bus_Type_Bus", Storage="_Bus", ThisKey="Bus_Type_Id", OtherKey="Bus_Type_Id")]
		public EntitySet<Bus> Bus
		{
			get
			{
				return this._Bus;
			}
			set
			{
				this._Bus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.Bus_Type = this;
		}
		
		private void detach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.Bus_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
    [DataContract(IsReference = true)]
    public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Company_Id;
        [DataMember]
        private string _Company_Name;
        [DataMember]
        private string _Address;
        [DataMember]
        private System.Nullable<decimal> _Phone;
        [DataMember]
        private System.Nullable<decimal> _Fax;
        [DataMember]
        private string _Region;
        [DataMember]
        private string _City;
        [DataMember]
        private bool _Contracted_Status;
        [DataMember]
        private string _Url_Image;
		
		private EntitySet<Bus> _Bus;
		
		private EntitySet<Driver> _Drivers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    partial void OnCompany_NameChanging(string value);
    partial void OnCompany_NameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(System.Nullable<decimal> value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(System.Nullable<decimal> value);
    partial void OnFaxChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnContracted_StatusChanging(bool value);
    partial void OnContracted_StatusChanged();
    partial void OnUrl_ImageChanging(string value);
    partial void OnUrl_ImageChanged();
    #endregion
		
		public Company()
		{
			this._Bus = new EntitySet<Bus>(new Action<Bus>(this.attach_Bus), new Action<Bus>(this.detach_Bus));
			this._Drivers = new EntitySet<Driver>(new Action<Driver>(this.attach_Drivers), new Action<Driver>(this.detach_Drivers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Name", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string Company_Name
		{
			get
			{
				return this._Company_Name;
			}
			set
			{
				if ((this._Company_Name != value))
				{
					this.OnCompany_NameChanging(value);
					this.SendPropertyChanging();
					this._Company_Name = value;
					this.SendPropertyChanged("Company_Name");
					this.OnCompany_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Decimal(11,0)")]
		public System.Nullable<decimal> Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="Decimal(11,0)")]
		public System.Nullable<decimal> Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="NVarChar(10)")]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(10)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contracted_Status", DbType="Bit NOT NULL")]
		public bool Contracted_Status
		{
			get
			{
				return this._Contracted_Status;
			}
			set
			{
				if ((this._Contracted_Status != value))
				{
					this.OnContracted_StatusChanging(value);
					this.SendPropertyChanging();
					this._Contracted_Status = value;
					this.SendPropertyChanged("Contracted_Status");
					this.OnContracted_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url_Image", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Url_Image
		{
			get
			{
				return this._Url_Image;
			}
			set
			{
				if ((this._Url_Image != value))
				{
					this.OnUrl_ImageChanging(value);
					this.SendPropertyChanging();
					this._Url_Image = value;
					this.SendPropertyChanged("Url_Image");
					this.OnUrl_ImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Bus", Storage="_Bus", ThisKey="Company_Id", OtherKey="Company_Id")]
		public EntitySet<Bus> Bus
		{
			get
			{
				return this._Bus;
			}
			set
			{
				this._Bus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Driver", Storage="_Drivers", ThisKey="Company_Id", OtherKey="Company_Id")]
		public EntitySet<Driver> Drivers
		{
			get
			{
				return this._Drivers;
			}
			set
			{
				this._Drivers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
    [DataContract(IsReference = true)]
    public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Customer_Id;
        [DataMember]
        private string _Customer_Name;
        [DataMember]
        private string _Address;
        [DataMember]
        private System.Nullable<decimal> _Phone;
        [DataMember]
        private bool _Status;
        [DataMember]
        private System.Nullable<decimal> _Identication_Number;
        [DataMember]
        private int _Account_Id;
		
		private EntitySet<Bill> _Bills;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_IdChanging(int value);
    partial void OnCustomer_IdChanged();
    partial void OnCustomer_NameChanging(string value);
    partial void OnCustomer_NameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(System.Nullable<decimal> value);
    partial void OnPhoneChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    partial void OnIdentication_NumberChanging(System.Nullable<decimal> value);
    partial void OnIdentication_NumberChanged();
    partial void OnAccount_IdChanging(int value);
    partial void OnAccount_IdChanged();
    #endregion
		
		public Customer()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Customer_Id
		{
			get
			{
				return this._Customer_Id;
			}
			set
			{
				if ((this._Customer_Id != value))
				{
					this.OnCustomer_IdChanging(value);
					this.SendPropertyChanging();
					this._Customer_Id = value;
					this.SendPropertyChanged("Customer_Id");
					this.OnCustomer_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Customer_Name
		{
			get
			{
				return this._Customer_Name;
			}
			set
			{
				if ((this._Customer_Name != value))
				{
					this.OnCustomer_NameChanging(value);
					this.SendPropertyChanging();
					this._Customer_Name = value;
					this.SendPropertyChanged("Customer_Name");
					this.OnCustomer_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Decimal(11,0)")]
		public System.Nullable<decimal> Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identication_Number", DbType="Decimal(9,0)")]
		public System.Nullable<decimal> Identication_Number
		{
			get
			{
				return this._Identication_Number;
			}
			set
			{
				if ((this._Identication_Number != value))
				{
					this.OnIdentication_NumberChanging(value);
					this.SendPropertyChanging();
					this._Identication_Number = value;
					this.SendPropertyChanged("Identication_Number");
					this.OnIdentication_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Id", DbType="Int NOT NULL")]
		public int Account_Id
		{
			get
			{
				return this._Account_Id;
			}
			set
			{
				if ((this._Account_Id != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_IdChanging(value);
					this.SendPropertyChanging();
					this._Account_Id = value;
					this.SendPropertyChanged("Account_Id");
					this.OnAccount_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Bill", Storage="_Bills", ThisKey="Customer_Id", OtherKey="Customer_Id")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Customer", Storage="_Account", ThisKey="Account_Id", OtherKey="Account_Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._Account_Id = value.Account_Id;
					}
					else
					{
						this._Account_Id = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Driver")]
    [DataContract(IsReference = true)]
    public partial class Driver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Driver_Id;
        [DataMember]
        private string _Driver_Name;
        [DataMember]
        private bool _Sex;
        [DataMember]
        private System.Nullable<decimal> _Phone;
        [DataMember]
        private string _Address;
        [DataMember]
        private bool _Status;
        [DataMember]
        private int _Company_Id;
        [DataMember]
        private int _Account_Id;
        [DataMember]
        private int _Salary_Id;
        [DataMember]
        private string _Url_Image;
		
		private EntitySet<Trip> _Trips;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Salary> _Salary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriver_IdChanging(int value);
    partial void OnDriver_IdChanged();
    partial void OnDriver_NameChanging(string value);
    partial void OnDriver_NameChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    partial void OnPhoneChanging(System.Nullable<decimal> value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    partial void OnAccount_IdChanging(int value);
    partial void OnAccount_IdChanged();
    partial void OnSalary_IdChanging(int value);
    partial void OnSalary_IdChanged();
    partial void OnUrl_ImageChanging(string value);
    partial void OnUrl_ImageChanged();
    #endregion
		
		public Driver()
		{
			this._Trips = new EntitySet<Trip>(new Action<Trip>(this.attach_Trips), new Action<Trip>(this.detach_Trips));
			this._Company = default(EntityRef<Company>);
			this._Salary = default(EntityRef<Salary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Driver_Id
		{
			get
			{
				return this._Driver_Id;
			}
			set
			{
				if ((this._Driver_Id != value))
				{
					this.OnDriver_IdChanging(value);
					this.SendPropertyChanging();
					this._Driver_Id = value;
					this.SendPropertyChanged("Driver_Id");
					this.OnDriver_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Driver_Name
		{
			get
			{
				return this._Driver_Name;
			}
			set
			{
				if ((this._Driver_Name != value))
				{
					this.OnDriver_NameChanging(value);
					this.SendPropertyChanging();
					this._Driver_Name = value;
					this.SendPropertyChanged("Driver_Name");
					this.OnDriver_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Decimal(11,0)")]
		public System.Nullable<decimal> Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Id", DbType="Int NOT NULL")]
		public int Account_Id
		{
			get
			{
				return this._Account_Id;
			}
			set
			{
				if ((this._Account_Id != value))
				{
					this.OnAccount_IdChanging(value);
					this.SendPropertyChanging();
					this._Account_Id = value;
					this.SendPropertyChanged("Account_Id");
					this.OnAccount_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary_Id", DbType="Int NOT NULL")]
		public int Salary_Id
		{
			get
			{
				return this._Salary_Id;
			}
			set
			{
				if ((this._Salary_Id != value))
				{
					if (this._Salary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalary_IdChanging(value);
					this.SendPropertyChanging();
					this._Salary_Id = value;
					this.SendPropertyChanged("Salary_Id");
					this.OnSalary_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url_Image", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Url_Image
		{
			get
			{
				return this._Url_Image;
			}
			set
			{
				if ((this._Url_Image != value))
				{
					this.OnUrl_ImageChanging(value);
					this.SendPropertyChanging();
					this._Url_Image = value;
					this.SendPropertyChanged("Url_Image");
					this.OnUrl_ImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Trip", Storage="_Trips", ThisKey="Driver_Id", OtherKey="Driver_Id")]
		public EntitySet<Trip> Trips
		{
			get
			{
				return this._Trips;
			}
			set
			{
				this._Trips.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Driver", Storage="_Company", ThisKey="Company_Id", OtherKey="Company_Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Drivers.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Drivers.Add(this);
						this._Company_Id = value.Company_Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salary_Driver", Storage="_Salary", ThisKey="Salary_Id", OtherKey="Salary_Id", IsForeignKey=true)]
		public Salary Salary
		{
			get
			{
				return this._Salary.Entity;
			}
			set
			{
				Salary previousValue = this._Salary.Entity;
				if (((previousValue != value) 
							|| (this._Salary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Salary.Entity = null;
						previousValue.Drivers.Remove(this);
					}
					this._Salary.Entity = value;
					if ((value != null))
					{
						value.Drivers.Add(this);
						this._Salary_Id = value.Salary_Id;
					}
					else
					{
						this._Salary_Id = default(int);
					}
					this.SendPropertyChanged("Salary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
    [DataContract(IsReference = true)]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Role_Id;
        [DataMember]
        private string _Role_Name;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRole_IdChanging(int value);
    partial void OnRole_IdChanged();
    partial void OnRole_NameChanging(string value);
    partial void OnRole_NameChanged();
    #endregion
		
		public Role()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Role_Id
		{
			get
			{
				return this._Role_Id;
			}
			set
			{
				if ((this._Role_Id != value))
				{
					this.OnRole_IdChanging(value);
					this.SendPropertyChanging();
					this._Role_Id = value;
					this.SendPropertyChanged("Role_Id");
					this.OnRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Role_Name
		{
			get
			{
				return this._Role_Name;
			}
			set
			{
				if ((this._Role_Name != value))
				{
					this.OnRole_NameChanging(value);
					this.SendPropertyChanging();
					this._Role_Name = value;
					this.SendPropertyChanged("Role_Name");
					this.OnRole_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Account", Storage="_Accounts", ThisKey="Role_Id", OtherKey="Role_Id")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Route")]
    [DataContract(IsReference = true)]
    public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Route_Id;
        [DataMember]
        private string _Start_Point;
        [DataMember]
        private string _Def_Point;
        [DataMember]
        private int _Trips_Per_Day;
        [DataMember]
        private string _Url;
		
		private EntitySet<Trip> _Trips;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoute_IdChanging(int value);
    partial void OnRoute_IdChanged();
    partial void OnStart_PointChanging(string value);
    partial void OnStart_PointChanged();
    partial void OnDef_PointChanging(string value);
    partial void OnDef_PointChanged();
    partial void OnTrips_Per_DayChanging(int value);
    partial void OnTrips_Per_DayChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public Route()
		{
			this._Trips = new EntitySet<Trip>(new Action<Trip>(this.attach_Trips), new Action<Trip>(this.detach_Trips));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Route_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Route_Id
		{
			get
			{
				return this._Route_Id;
			}
			set
			{
				if ((this._Route_Id != value))
				{
					this.OnRoute_IdChanging(value);
					this.SendPropertyChanging();
					this._Route_Id = value;
					this.SendPropertyChanged("Route_Id");
					this.OnRoute_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_Point", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Start_Point
		{
			get
			{
				return this._Start_Point;
			}
			set
			{
				if ((this._Start_Point != value))
				{
					this.OnStart_PointChanging(value);
					this.SendPropertyChanging();
					this._Start_Point = value;
					this.SendPropertyChanged("Start_Point");
					this.OnStart_PointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Def_Point", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Def_Point
		{
			get
			{
				return this._Def_Point;
			}
			set
			{
				if ((this._Def_Point != value))
				{
					this.OnDef_PointChanging(value);
					this.SendPropertyChanging();
					this._Def_Point = value;
					this.SendPropertyChanged("Def_Point");
					this.OnDef_PointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trips_Per_Day", DbType="Int NOT NULL")]
		public int Trips_Per_Day
		{
			get
			{
				return this._Trips_Per_Day;
			}
			set
			{
				if ((this._Trips_Per_Day != value))
				{
					this.OnTrips_Per_DayChanging(value);
					this.SendPropertyChanging();
					this._Trips_Per_Day = value;
					this.SendPropertyChanged("Trips_Per_Day");
					this.OnTrips_Per_DayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(100)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Trip", Storage="_Trips", ThisKey="Route_Id", OtherKey="Route_Id")]
		public EntitySet<Trip> Trips
		{
			get
			{
				return this._Trips;
			}
			set
			{
				this._Trips.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Salary")]
    [DataContract(IsReference = true)]
    public partial class Salary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Salary_Id;
        [DataMember]
        private double _Salary_Wave;
        [DataMember]
        private decimal _Total;
		
		private EntitySet<Admin> _Admins;
		
		private EntitySet<Driver> _Drivers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalary_IdChanging(int value);
    partial void OnSalary_IdChanged();
    partial void OnSalary_WaveChanging(double value);
    partial void OnSalary_WaveChanged();
    partial void OnTotalChanging(decimal value);
    partial void OnTotalChanged();
    #endregion
		
		public Salary()
		{
			this._Admins = new EntitySet<Admin>(new Action<Admin>(this.attach_Admins), new Action<Admin>(this.detach_Admins));
			this._Drivers = new EntitySet<Driver>(new Action<Driver>(this.attach_Drivers), new Action<Driver>(this.detach_Drivers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Salary_Id
		{
			get
			{
				return this._Salary_Id;
			}
			set
			{
				if ((this._Salary_Id != value))
				{
					this.OnSalary_IdChanging(value);
					this.SendPropertyChanging();
					this._Salary_Id = value;
					this.SendPropertyChanged("Salary_Id");
					this.OnSalary_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary_Wave", DbType="Float NOT NULL")]
		public double Salary_Wave
		{
			get
			{
				return this._Salary_Wave;
			}
			set
			{
				if ((this._Salary_Wave != value))
				{
					this.OnSalary_WaveChanging(value);
					this.SendPropertyChanging();
					this._Salary_Wave = value;
					this.SendPropertyChanged("Salary_Wave");
					this.OnSalary_WaveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Decimal(12,0) NOT NULL")]
		public decimal Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salary_Admin", Storage="_Admins", ThisKey="Salary_Id", OtherKey="Salary_Id")]
		public EntitySet<Admin> Admins
		{
			get
			{
				return this._Admins;
			}
			set
			{
				this._Admins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salary_Driver", Storage="_Drivers", ThisKey="Salary_Id", OtherKey="Salary_Id")]
		public EntitySet<Driver> Drivers
		{
			get
			{
				return this._Drivers;
			}
			set
			{
				this._Drivers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.Salary = this;
		}
		
		private void detach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.Salary = null;
		}
		
		private void attach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Salary = this;
		}
		
		private void detach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Salary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seat")]
    [DataContract(IsReference = true)]
    public partial class Seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Seat_Id;
        [DataMember]
        private int _Status;
        [DataMember]
        private string _Seat_Code;
        [DataMember]
        private int _Seat_Position;
        [DataMember]
        private int _Bus_Id;
		
		private EntitySet<Seat_Map> _Seat_Maps;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<Bus> _Bus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeat_IdChanging(int value);
    partial void OnSeat_IdChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnSeat_CodeChanging(string value);
    partial void OnSeat_CodeChanged();
    partial void OnSeat_PositionChanging(int value);
    partial void OnSeat_PositionChanged();
    partial void OnBus_IdChanging(int value);
    partial void OnBus_IdChanged();
    #endregion
		
		public Seat()
		{
			this._Seat_Maps = new EntitySet<Seat_Map>(new Action<Seat_Map>(this.attach_Seat_Maps), new Action<Seat_Map>(this.detach_Seat_Maps));
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._Bus = default(EntityRef<Bus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Seat_Id
		{
			get
			{
				return this._Seat_Id;
			}
			set
			{
				if ((this._Seat_Id != value))
				{
					this.OnSeat_IdChanging(value);
					this.SendPropertyChanging();
					this._Seat_Id = value;
					this.SendPropertyChanged("Seat_Id");
					this.OnSeat_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat_Code", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string Seat_Code
		{
			get
			{
				return this._Seat_Code;
			}
			set
			{
				if ((this._Seat_Code != value))
				{
					this.OnSeat_CodeChanging(value);
					this.SendPropertyChanging();
					this._Seat_Code = value;
					this.SendPropertyChanged("Seat_Code");
					this.OnSeat_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat_Position", DbType="Int NOT NULL")]
		public int Seat_Position
		{
			get
			{
				return this._Seat_Position;
			}
			set
			{
				if ((this._Seat_Position != value))
				{
					this.OnSeat_PositionChanging(value);
					this.SendPropertyChanging();
					this._Seat_Position = value;
					this.SendPropertyChanged("Seat_Position");
					this.OnSeat_PositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bus_Id", DbType="Int NOT NULL")]
		public int Bus_Id
		{
			get
			{
				return this._Bus_Id;
			}
			set
			{
				if ((this._Bus_Id != value))
				{
					if (this._Bus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBus_IdChanging(value);
					this.SendPropertyChanging();
					this._Bus_Id = value;
					this.SendPropertyChanged("Bus_Id");
					this.OnBus_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Seat_Map", Storage="_Seat_Maps", ThisKey="Seat_Id", OtherKey="Seat_Id")]
		public EntitySet<Seat_Map> Seat_Maps
		{
			get
			{
				return this._Seat_Maps;
			}
			set
			{
				this._Seat_Maps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Ticket", Storage="_Tickets", ThisKey="Seat_Id", OtherKey="Seat_Id")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bus_Seat", Storage="_Bus", ThisKey="Bus_Id", OtherKey="Bus_Id", IsForeignKey=true)]
		public Bus Bus
		{
			get
			{
				return this._Bus.Entity;
			}
			set
			{
				Bus previousValue = this._Bus.Entity;
				if (((previousValue != value) 
							|| (this._Bus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bus.Entity = null;
						previousValue.Seats.Remove(this);
					}
					this._Bus.Entity = value;
					if ((value != null))
					{
						value.Seats.Add(this);
						this._Bus_Id = value.Bus_Id;
					}
					else
					{
						this._Bus_Id = default(int);
					}
					this.SendPropertyChanged("Bus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Seat_Maps(Seat_Map entity)
		{
			this.SendPropertyChanging();
			entity.Seat = this;
		}
		
		private void detach_Seat_Maps(Seat_Map entity)
		{
			this.SendPropertyChanging();
			entity.Seat = null;
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Seat = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Seat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seat_Map")]
    [DataContract(IsReference = true)]
    public partial class Seat_Map : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Seat_Id;
        [DataMember]
        private int _Trip_Id;
        [DataMember]
        private bool _Status;
		
		private EntityRef<Seat> _Seat;
		
		private EntityRef<Trip> _Trip;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeat_IdChanging(int value);
    partial void OnSeat_IdChanged();
    partial void OnTrip_IdChanging(int value);
    partial void OnTrip_IdChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    #endregion
		
		public Seat_Map()
		{
			this._Seat = default(EntityRef<Seat>);
			this._Trip = default(EntityRef<Trip>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Seat_Id
		{
			get
			{
				return this._Seat_Id;
			}
			set
			{
				if ((this._Seat_Id != value))
				{
					if (this._Seat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeat_IdChanging(value);
					this.SendPropertyChanging();
					this._Seat_Id = value;
					this.SendPropertyChanged("Seat_Id");
					this.OnSeat_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trip_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Trip_Id
		{
			get
			{
				return this._Trip_Id;
			}
			set
			{
				if ((this._Trip_Id != value))
				{
					if (this._Trip.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrip_IdChanging(value);
					this.SendPropertyChanging();
					this._Trip_Id = value;
					this.SendPropertyChanged("Trip_Id");
					this.OnTrip_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Seat_Map", Storage="_Seat", ThisKey="Seat_Id", OtherKey="Seat_Id", IsForeignKey=true)]
		public Seat Seat
		{
			get
			{
				return this._Seat.Entity;
			}
			set
			{
				Seat previousValue = this._Seat.Entity;
				if (((previousValue != value) 
							|| (this._Seat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seat.Entity = null;
						previousValue.Seat_Maps.Remove(this);
					}
					this._Seat.Entity = value;
					if ((value != null))
					{
						value.Seat_Maps.Add(this);
						this._Seat_Id = value.Seat_Id;
					}
					else
					{
						this._Seat_Id = default(int);
					}
					this.SendPropertyChanged("Seat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trip_Seat_Map", Storage="_Trip", ThisKey="Trip_Id", OtherKey="Trip_Id", IsForeignKey=true)]
		public Trip Trip
		{
			get
			{
				return this._Trip.Entity;
			}
			set
			{
				Trip previousValue = this._Trip.Entity;
				if (((previousValue != value) 
							|| (this._Trip.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trip.Entity = null;
						previousValue.Seat_Maps.Remove(this);
					}
					this._Trip.Entity = value;
					if ((value != null))
					{
						value.Seat_Maps.Add(this);
						this._Trip_Id = value.Trip_Id;
					}
					else
					{
						this._Trip_Id = default(int);
					}
					this.SendPropertyChanged("Trip");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ticket")]
    [DataContract(IsReference = true)]
    public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Ticket_Id;
        [DataMember]
        private int _Seat_Id;
        [DataMember]
        private bool _Status;
        [DataMember]
        private decimal _Unit_Price;
        [DataMember]
        private int _Trip_Id;
		
		private EntitySet<Bill_Item> _Bill_Items;
		
		private EntityRef<Seat> _Seat;
		
		private EntityRef<Trip> _Trip;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicket_IdChanging(int value);
    partial void OnTicket_IdChanged();
    partial void OnSeat_IdChanging(int value);
    partial void OnSeat_IdChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    partial void OnUnit_PriceChanging(decimal value);
    partial void OnUnit_PriceChanged();
    partial void OnTrip_IdChanging(int value);
    partial void OnTrip_IdChanged();
    #endregion
		
		public Ticket()
		{
			this._Bill_Items = new EntitySet<Bill_Item>(new Action<Bill_Item>(this.attach_Bill_Items), new Action<Bill_Item>(this.detach_Bill_Items));
			this._Seat = default(EntityRef<Seat>);
			this._Trip = default(EntityRef<Trip>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticket_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Ticket_Id
		{
			get
			{
				return this._Ticket_Id;
			}
			set
			{
				if ((this._Ticket_Id != value))
				{
					this.OnTicket_IdChanging(value);
					this.SendPropertyChanging();
					this._Ticket_Id = value;
					this.SendPropertyChanged("Ticket_Id");
					this.OnTicket_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat_Id", DbType="Int NOT NULL")]
		public int Seat_Id
		{
			get
			{
				return this._Seat_Id;
			}
			set
			{
				if ((this._Seat_Id != value))
				{
					if (this._Seat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeat_IdChanging(value);
					this.SendPropertyChanging();
					this._Seat_Id = value;
					this.SendPropertyChanged("Seat_Id");
					this.OnSeat_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_Price", DbType="Decimal(10,0) NOT NULL")]
		public decimal Unit_Price
		{
			get
			{
				return this._Unit_Price;
			}
			set
			{
				if ((this._Unit_Price != value))
				{
					this.OnUnit_PriceChanging(value);
					this.SendPropertyChanging();
					this._Unit_Price = value;
					this.SendPropertyChanged("Unit_Price");
					this.OnUnit_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trip_Id", DbType="Int NOT NULL")]
		public int Trip_Id
		{
			get
			{
				return this._Trip_Id;
			}
			set
			{
				if ((this._Trip_Id != value))
				{
					if (this._Trip.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrip_IdChanging(value);
					this.SendPropertyChanging();
					this._Trip_Id = value;
					this.SendPropertyChanged("Trip_Id");
					this.OnTrip_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_Bill_Item", Storage="_Bill_Items", ThisKey="Ticket_Id", OtherKey="Ticket_Id")]
		public EntitySet<Bill_Item> Bill_Items
		{
			get
			{
				return this._Bill_Items;
			}
			set
			{
				this._Bill_Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Ticket", Storage="_Seat", ThisKey="Seat_Id", OtherKey="Seat_Id", IsForeignKey=true)]
		public Seat Seat
		{
			get
			{
				return this._Seat.Entity;
			}
			set
			{
				Seat previousValue = this._Seat.Entity;
				if (((previousValue != value) 
							|| (this._Seat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seat.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Seat.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._Seat_Id = value.Seat_Id;
					}
					else
					{
						this._Seat_Id = default(int);
					}
					this.SendPropertyChanged("Seat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trip_Ticket", Storage="_Trip", ThisKey="Trip_Id", OtherKey="Trip_Id", IsForeignKey=true)]
		public Trip Trip
		{
			get
			{
				return this._Trip.Entity;
			}
			set
			{
				Trip previousValue = this._Trip.Entity;
				if (((previousValue != value) 
							|| (this._Trip.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trip.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Trip.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._Trip_Id = value.Trip_Id;
					}
					else
					{
						this._Trip_Id = default(int);
					}
					this.SendPropertyChanged("Trip");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bill_Items(Bill_Item entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = this;
		}
		
		private void detach_Bill_Items(Bill_Item entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trip")]
    [DataContract(IsReference = true)]
    public partial class Trip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        [DataMember]
        private int _Trip_Id;
        [DataMember]
        private int _Bus_Id;
        [DataMember]
        private int _Route_Id;
        [DataMember]
        private System.DateTime _Start_Time;
        [DataMember]
        private bool _Status;
        [DataMember]
        private int _Driver_Id;
        [DataMember]
        private decimal _Price;
		
		private EntitySet<Seat_Map> _Seat_Maps;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<Bus> _Bus;
		
		private EntityRef<Driver> _Driver;
		
		private EntityRef<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrip_IdChanging(int value);
    partial void OnTrip_IdChanged();
    partial void OnBus_IdChanging(int value);
    partial void OnBus_IdChanged();
    partial void OnRoute_IdChanging(int value);
    partial void OnRoute_IdChanged();
    partial void OnStart_TimeChanging(System.DateTime value);
    partial void OnStart_TimeChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    partial void OnDriver_IdChanging(int value);
    partial void OnDriver_IdChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public Trip()
		{
			this._Seat_Maps = new EntitySet<Seat_Map>(new Action<Seat_Map>(this.attach_Seat_Maps), new Action<Seat_Map>(this.detach_Seat_Maps));
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._Bus = default(EntityRef<Bus>);
			this._Driver = default(EntityRef<Driver>);
			this._Route = default(EntityRef<Route>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trip_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Trip_Id
		{
			get
			{
				return this._Trip_Id;
			}
			set
			{
				if ((this._Trip_Id != value))
				{
					this.OnTrip_IdChanging(value);
					this.SendPropertyChanging();
					this._Trip_Id = value;
					this.SendPropertyChanged("Trip_Id");
					this.OnTrip_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bus_Id", DbType="Int NOT NULL")]
		public int Bus_Id
		{
			get
			{
				return this._Bus_Id;
			}
			set
			{
				if ((this._Bus_Id != value))
				{
					if (this._Bus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBus_IdChanging(value);
					this.SendPropertyChanging();
					this._Bus_Id = value;
					this.SendPropertyChanged("Bus_Id");
					this.OnBus_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Route_Id", DbType="Int NOT NULL")]
		public int Route_Id
		{
			get
			{
				return this._Route_Id;
			}
			set
			{
				if ((this._Route_Id != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoute_IdChanging(value);
					this.SendPropertyChanging();
					this._Route_Id = value;
					this.SendPropertyChanged("Route_Id");
					this.OnRoute_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Start_Time
		{
			get
			{
				return this._Start_Time;
			}
			set
			{
				if ((this._Start_Time != value))
				{
					this.OnStart_TimeChanging(value);
					this.SendPropertyChanging();
					this._Start_Time = value;
					this.SendPropertyChanged("Start_Time");
					this.OnStart_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Id", DbType="Int NOT NULL")]
		public int Driver_Id
		{
			get
			{
				return this._Driver_Id;
			}
			set
			{
				if ((this._Driver_Id != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriver_IdChanging(value);
					this.SendPropertyChanging();
					this._Driver_Id = value;
					this.SendPropertyChanged("Driver_Id");
					this.OnDriver_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(10,4) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trip_Seat_Map", Storage="_Seat_Maps", ThisKey="Trip_Id", OtherKey="Trip_Id")]
		public EntitySet<Seat_Map> Seat_Maps
		{
			get
			{
				return this._Seat_Maps;
			}
			set
			{
				this._Seat_Maps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trip_Ticket", Storage="_Tickets", ThisKey="Trip_Id", OtherKey="Trip_Id")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bus_Trip", Storage="_Bus", ThisKey="Bus_Id", OtherKey="Bus_Id", IsForeignKey=true)]
		public Bus Bus
		{
			get
			{
				return this._Bus.Entity;
			}
			set
			{
				Bus previousValue = this._Bus.Entity;
				if (((previousValue != value) 
							|| (this._Bus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bus.Entity = null;
						previousValue.Trips.Remove(this);
					}
					this._Bus.Entity = value;
					if ((value != null))
					{
						value.Trips.Add(this);
						this._Bus_Id = value.Bus_Id;
					}
					else
					{
						this._Bus_Id = default(int);
					}
					this.SendPropertyChanged("Bus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Trip", Storage="_Driver", ThisKey="Driver_Id", OtherKey="Driver_Id", IsForeignKey=true)]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.Trips.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.Trips.Add(this);
						this._Driver_Id = value.Driver_Id;
					}
					else
					{
						this._Driver_Id = default(int);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Trip", Storage="_Route", ThisKey="Route_Id", OtherKey="Route_Id", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Trips.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Trips.Add(this);
						this._Route_Id = value.Route_Id;
					}
					else
					{
						this._Route_Id = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Seat_Maps(Seat_Map entity)
		{
			this.SendPropertyChanging();
			entity.Trip = this;
		}
		
		private void detach_Seat_Maps(Seat_Map entity)
		{
			this.SendPropertyChanging();
			entity.Trip = null;
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Trip = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Trip = null;
		}
	}
}
#pragma warning restore 1591
