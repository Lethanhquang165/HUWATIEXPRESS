#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HUWATIExpress.Models
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;
    using System.Runtime.Serialization;

    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HUWA")]
	public partial class huwadbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertSeat(Seat instance);
    partial void UpdateSeat(Seat instance);
    partial void DeleteSeat(Seat instance);
    partial void InsertSeat_Type(Seat_Type instance);
    partial void UpdateSeat_Type(Seat_Type instance);
    partial void DeleteSeat_Type(Seat_Type instance);
    partial void InsertTrip(Trip instance);
    partial void UpdateTrip(Trip instance);
    partial void DeleteTrip(Trip instance);
    #endregion
		
		public huwadbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HUWAConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public huwadbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public huwadbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public huwadbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public huwadbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Route> Routes
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<Seat> Seats
		{
			get
			{
				return this.GetTable<Seat>();
			}
		}
		
		public System.Data.Linq.Table<Seat_Type> Seat_Types
		{
			get
			{
				return this.GetTable<Seat_Type>();
			}
		}
		
		public System.Data.Linq.Table<Trip> Trips
		{
			get
			{
				return this.GetTable<Trip>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Route")]
    [DataContract (IsReference = true)]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        [DataMember]
        private int _Route_Id;

        [DataMember]
        private string _Start_Point;

        [DataMember]
        private string _Def_Point;

        [DataMember]
        private int _Trips_Per_Day;

        [DataMember]
        private int _Seat_Type_Id;
		
		private EntitySet<Trip> _Trips;
		
		private EntityRef<Seat_Type> _Seat_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoute_IdChanging(int value);
    partial void OnRoute_IdChanged();
    partial void OnStart_PointChanging(string value);
    partial void OnStart_PointChanged();
    partial void OnDef_PointChanging(string value);
    partial void OnDef_PointChanged();
    partial void OnTrips_Per_DayChanging(int value);
    partial void OnTrips_Per_DayChanged();
    partial void OnSeat_Type_IdChanging(int value);
    partial void OnSeat_Type_IdChanged();
    #endregion
		
		public Route()
		{
			this._Trips = new EntitySet<Trip>(new Action<Trip>(this.attach_Trips), new Action<Trip>(this.detach_Trips));
			this._Seat_Type = default(EntityRef<Seat_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Route_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Route_Id
		{
			get
			{
				return this._Route_Id;
			}
			set
			{
				if ((this._Route_Id != value))
				{
					this.OnRoute_IdChanging(value);
					this.SendPropertyChanging();
					this._Route_Id = value;
					this.SendPropertyChanged("Route_Id");
					this.OnRoute_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_Point", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Start_Point
		{
			get
			{
				return this._Start_Point;
			}
			set
			{
				if ((this._Start_Point != value))
				{
					this.OnStart_PointChanging(value);
					this.SendPropertyChanging();
					this._Start_Point = value;
					this.SendPropertyChanged("Start_Point");
					this.OnStart_PointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Def_Point", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Def_Point
		{
			get
			{
				return this._Def_Point;
			}
			set
			{
				if ((this._Def_Point != value))
				{
					this.OnDef_PointChanging(value);
					this.SendPropertyChanging();
					this._Def_Point = value;
					this.SendPropertyChanged("Def_Point");
					this.OnDef_PointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trips_Per_Day", DbType="Int NOT NULL")]
		public int Trips_Per_Day
		{
			get
			{
				return this._Trips_Per_Day;
			}
			set
			{
				if ((this._Trips_Per_Day != value))
				{
					this.OnTrips_Per_DayChanging(value);
					this.SendPropertyChanging();
					this._Trips_Per_Day = value;
					this.SendPropertyChanged("Trips_Per_Day");
					this.OnTrips_Per_DayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat_Type_Id", DbType="Int NOT NULL")]
		public int Seat_Type_Id
		{
			get
			{
				return this._Seat_Type_Id;
			}
			set
			{
				if ((this._Seat_Type_Id != value))
				{
					if (this._Seat_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeat_Type_IdChanging(value);
					this.SendPropertyChanging();
					this._Seat_Type_Id = value;
					this.SendPropertyChanged("Seat_Type_Id");
					this.OnSeat_Type_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Trip", Storage="_Trips", ThisKey="Route_Id", OtherKey="Route_Id")]
		public EntitySet<Trip> Trips
		{
			get
			{
				return this._Trips;
			}
			set
			{
				this._Trips.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Type_Route", Storage="_Seat_Type", ThisKey="Seat_Type_Id", OtherKey="Seat_Type_Id", IsForeignKey=true)]
		public Seat_Type Seat_Type
		{
			get
			{
				return this._Seat_Type.Entity;
			}
			set
			{
				Seat_Type previousValue = this._Seat_Type.Entity;
				if (((previousValue != value) 
							|| (this._Seat_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seat_Type.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._Seat_Type.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._Seat_Type_Id = value.Seat_Type_Id;
					}
					else
					{
						this._Seat_Type_Id = default(int);
					}
					this.SendPropertyChanged("Seat_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seat")]
    [DataContract(IsReference = true)]
    public partial class Seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        [DataMember]
        private int _Seat_Id;

        [DataMember]
        private int _Seat_Type_Id;

        [DataMember]
        private long _Status;
		
		private EntityRef<Seat_Type> _Seat_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeat_IdChanging(int value);
    partial void OnSeat_IdChanged();
    partial void OnSeat_Type_IdChanging(int value);
    partial void OnSeat_Type_IdChanged();
    partial void OnStatusChanging(long value);
    partial void OnStatusChanged();
    #endregion
		
		public Seat()
		{
			this._Seat_Type = default(EntityRef<Seat_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Seat_Id
		{
			get
			{
				return this._Seat_Id;
			}
			set
			{
				if ((this._Seat_Id != value))
				{
					this.OnSeat_IdChanging(value);
					this.SendPropertyChanging();
					this._Seat_Id = value;
					this.SendPropertyChanged("Seat_Id");
					this.OnSeat_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat_Type_Id", DbType="Int NOT NULL")]
		public int Seat_Type_Id
		{
			get
			{
				return this._Seat_Type_Id;
			}
			set
			{
				if ((this._Seat_Type_Id != value))
				{
					if (this._Seat_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeat_Type_IdChanging(value);
					this.SendPropertyChanging();
					this._Seat_Type_Id = value;
					this.SendPropertyChanged("Seat_Type_Id");
					this.OnSeat_Type_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="BigInt NOT NULL")]
		public long Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Type_Seat", Storage="_Seat_Type", ThisKey="Seat_Type_Id", OtherKey="Seat_Type_Id", IsForeignKey=true)]
		public Seat_Type Seat_Type
		{
			get
			{
				return this._Seat_Type.Entity;
			}
			set
			{
				Seat_Type previousValue = this._Seat_Type.Entity;
				if (((previousValue != value) 
							|| (this._Seat_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seat_Type.Entity = null;
						previousValue.Seats.Remove(this);
					}
					this._Seat_Type.Entity = value;
					if ((value != null))
					{
						value.Seats.Add(this);
						this._Seat_Type_Id = value.Seat_Type_Id;
					}
					else
					{
						this._Seat_Type_Id = default(int);
					}
					this.SendPropertyChanged("Seat_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seat_Type")]
    [DataContract(IsReference = true)]
    public partial class Seat_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        [DataMember]
        private int _Seat_Type_Id;

        [DataMember]
        private string _Type;
		
		private EntitySet<Route> _Routes;
		
		private EntitySet<Seat> _Seats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeat_Type_IdChanging(int value);
    partial void OnSeat_Type_IdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Seat_Type()
		{
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			this._Seats = new EntitySet<Seat>(new Action<Seat>(this.attach_Seats), new Action<Seat>(this.detach_Seats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat_Type_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Seat_Type_Id
		{
			get
			{
				return this._Seat_Type_Id;
			}
			set
			{
				if ((this._Seat_Type_Id != value))
				{
					this.OnSeat_Type_IdChanging(value);
					this.SendPropertyChanging();
					this._Seat_Type_Id = value;
					this.SendPropertyChanged("Seat_Type_Id");
					this.OnSeat_Type_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Type_Route", Storage="_Routes", ThisKey="Seat_Type_Id", OtherKey="Seat_Type_Id")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Type_Seat", Storage="_Seats", ThisKey="Seat_Type_Id", OtherKey="Seat_Type_Id")]
		public EntitySet<Seat> Seats
		{
			get
			{
				return this._Seats;
			}
			set
			{
				this._Seats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Seat_Type = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Seat_Type = null;
		}
		
		private void attach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Seat_Type = this;
		}
		
		private void detach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Seat_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trip")]
    [DataContract(IsReference = true)]
    public partial class Trip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		[DataMember]private int _Trip_Id;

        [DataMember]
        private System.DateTime _Start_Time;

        [DataMember]
        private int _Route_Id;

        [DataMember]
        private bool _Status;
		
		private EntityRef<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrip_IdChanging(int value);
    partial void OnTrip_IdChanged();
    partial void OnStart_TimeChanging(System.DateTime value);
    partial void OnStart_TimeChanged();
    partial void OnRoute_IdChanging(int value);
    partial void OnRoute_IdChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    #endregion
		
		public Trip()
		{
			this._Route = default(EntityRef<Route>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trip_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Trip_Id
		{
			get
			{
				return this._Trip_Id;
			}
			set
			{
				if ((this._Trip_Id != value))
				{
					this.OnTrip_IdChanging(value);
					this.SendPropertyChanging();
					this._Trip_Id = value;
					this.SendPropertyChanged("Trip_Id");
					this.OnTrip_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Start_Time
		{
			get
			{
				return this._Start_Time;
			}
			set
			{
				if ((this._Start_Time != value))
				{
					this.OnStart_TimeChanging(value);
					this.SendPropertyChanging();
					this._Start_Time = value;
					this.SendPropertyChanged("Start_Time");
					this.OnStart_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Route_Id", DbType="Int NOT NULL")]
		public int Route_Id
		{
			get
			{
				return this._Route_Id;
			}
			set
			{
				if ((this._Route_Id != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoute_IdChanging(value);
					this.SendPropertyChanging();
					this._Route_Id = value;
					this.SendPropertyChanged("Route_Id");
					this.OnRoute_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Trip", Storage="_Route", ThisKey="Route_Id", OtherKey="Route_Id", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Trips.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Trips.Add(this);
						this._Route_Id = value.Route_Id;
					}
					else
					{
						this._Route_Id = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
